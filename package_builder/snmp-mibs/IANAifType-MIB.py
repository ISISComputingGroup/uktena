# SNMP MIB module (IANAifType-MIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source https://raw.githubusercontent.com/net-snmp/net-snmp/master/mibs/IANAifType-MIB.txt
# Produced by pysmi-1.4.3 at Wed Apr 10 12:56:21 2024
# On host ? platform ? version ? by user ?
# Using Python version 3.11.6 (tags/v3.11.6:8b6ee5b, Oct  2 2023, 14:57:12) [MSC v.1935 64 bit (AMD64)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint,
 ConstraintsUnion) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint",
    "ConstraintsUnion")

# Import SMI symbols from the MIBs this MIB depends on

(NotificationGroup,
 ModuleCompliance) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "NotificationGroup",
    "ModuleCompliance")

(ObjectIdentity,
 Counter64,
 Unsigned32,
 Bits,
 Gauge32,
 mib_2,
 TimeTicks,
 NotificationType,
 MibIdentifier,
 Integer32,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 IpAddress,
 ModuleIdentity,
 iso,
 Counter32) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "ObjectIdentity",
    "Counter64",
    "Unsigned32",
    "Bits",
    "Gauge32",
    "mib-2",
    "TimeTicks",
    "NotificationType",
    "MibIdentifier",
    "Integer32",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "IpAddress",
    "ModuleIdentity",
    "iso",
    "Counter32")

(TextualConvention,
 DisplayString) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "TextualConvention",
    "DisplayString")


# MODULE-IDENTITY

ianaifType = ModuleIdentity(
    (1, 3, 6, 1, 2, 1, 30)
)
ianaifType.setRevisions(
        ("2022-08-17 00:00",
         "2021-05-17 00:00",
         "2021-04-23 00:00",
         "2021-04-22 00:00",
         "2021-02-18 00:00",
         "2020-08-27 00:00",
         "2020-07-10 00:00",
         "2020-04-02 00:00",
         "2020-01-10 00:00",
         "2019-12-03 00:00",
         "2019-10-16 00:00",
         "2019-02-14 00:00",
         "2019-02-08 00:00",
         "2019-01-31 00:00",
         "2018-07-04 00:00",
         "2018-06-28 00:00",
         "2018-06-22 00:00",
         "2018-06-21 00:00",
         "2017-03-30 00:00",
         "2017-01-19 00:00",
         "2016-11-23 00:00",
         "2016-06-16 00:00",
         "2016-06-09 00:00",
         "2016-06-08 00:00",
         "2016-05-19 00:00",
         "2016-05-03 00:00",
         "2016-04-29 00:00",
         "2014-09-24 00:00",
         "2014-09-19 00:00",
         "2014-07-03 00:00",
         "2014-05-22 00:00",
         "2012-05-17 00:00",
         "2012-01-11 00:00",
         "2011-12-18 00:00",
         "2011-10-26 00:00",
         "2011-09-07 00:00",
         "2011-07-22 00:00",
         "2011-06-03 00:00",
         "2010-09-21 00:00",
         "2010-07-21 00:00",
         "2010-02-11 00:00",
         "2010-02-08 00:00",
         "2009-05-06 00:00",
         "2009-02-06 00:00",
         "2008-10-09 00:00",
         "2008-08-12 00:00",
         "2008-07-22 00:00",
         "2008-06-24 00:00",
         "2008-05-29 00:00",
         "2007-09-13 00:00",
         "2007-05-29 00:00",
         "2007-03-08 00:00",
         "2007-01-23 00:00",
         "2006-10-17 00:00",
         "2006-09-25 00:00",
         "2006-08-17 00:00",
         "2006-08-11 00:00",
         "2006-07-25 00:00",
         "2006-06-14 00:00",
         "2006-03-31 00:00",
         "2006-03-30 00:00",
         "2005-12-22 00:00",
         "2005-10-10 00:00",
         "2005-09-09 00:00",
         "2005-05-27 00:00",
         "2005-03-03 00:00",
         "2004-11-22 00:00",
         "2004-06-17 00:00",
         "2004-05-12 00:00",
         "2004-05-07 00:00",
         "2003-08-25 00:00",
         "2003-08-18 00:00",
         "2003-08-07 00:00",
         "2003-03-18 00:00",
         "2003-01-13 00:00",
         "2002-10-17 00:00",
         "2002-07-16 00:00",
         "2002-07-10 00:00",
         "2002-06-19 00:00",
         "2002-01-04 00:00",
         "2001-12-20 00:00",
         "2001-11-15 00:00",
         "2001-11-06 00:00",
         "2001-11-02 00:00",
         "2001-10-16 00:00",
         "2001-09-19 00:00",
         "2001-05-11 00:00",
         "2001-01-12 00:00",
         "2000-12-19 00:00",
         "2000-12-07 00:00",
         "2000-12-04 00:00",
         "2000-10-17 00:00",
         "2000-10-02 00:00",
         "2000-09-01 00:00",
         "2000-08-24 00:00",
         "2000-08-23 00:00",
         "2000-08-22 00:00",
         "2000-04-25 00:00",
         "2000-03-06 00:00",
         "1999-10-08 14:30",
         "1994-01-31 00:00")
)
ianaifType.setLastUpdated("202208170000Z")
if mibBuilder.loadTexts:
    ianaifType.setOrganization("""\
IANA
""")
ianaifType.setContactInfo("""\
        Internet Assigned Numbers Authority

                     Postal: ICANN
                             12025 Waterfront Drive, Suite 300
                             Los Angeles, CA 90094-2536

                     Tel:    +1 310-301-5800
                     E-Mail: iana@iana.org
""")
if mibBuilder.loadTexts:
    ianaifType.setDescription("""\
This MIB module defines the IANAifType Textual
                     Convention, and thus the enumerated values of
                     the ifType object defined in MIB-II's ifTable.
""")


# Types definitions


# TEXTUAL-CONVENTIONS



class IANAifType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90,
              91,
              92,
              93,
              94,
              95,
              96,
              97,
              98,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              128,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              147,
              148,
              149,
              150,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              181,
              182,
              183,
              184,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              199,
              200,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              208,
              209,
              210,
              211,
              212,
              213,
              214,
              215,
              216,
              217,
              218,
              219,
              220,
              221,
              222,
              223,
              224,
              225,
              226,
              227,
              228,
              229,
              230,
              231,
              232,
              233,
              234,
              235,
              236,
              237,
              238,
              239,
              240,
              241,
              242,
              243,
              244,
              245,
              246,
              247,
              248,
              249,
              250,
              251,
              252,
              253,
              254,
              255,
              256,
              257,
              258,
              259,
              260,
              261,
              262,
              263,
              264,
              265,
              266,
              267,
              268,
              269,
              270,
              271,
              272,
              277,
              278,
              279,
              280,
              281,
              282,
              283,
              284,
              285,
              286,
              287,
              288,
              289,
              290,
              291,
              292,
              293,
              294,
              295,
              296,
              297,
              298,
              299,
              300,
              301,
              302,
              303)
        )
    )
    namedValues = NamedValues(
        *(("a12MppSwitch", 130),
          ("aal2", 187),
          ("aal5", 49),
          ("actelisMetaLOOP", 223),
          ("adsl", 94),
          ("adsl2", 230),
          ("adsl2plus", 238),
          ("aflane8023", 59),
          ("aflane8025", 60),
          ("aluELP", 249),
          ("aluEpon", 266),
          ("aluEponLogicalLink", 269),
          ("aluEponOnu", 267),
          ("aluEponPhysicalUni", 268),
          ("aluGponOnu", 270),
          ("aluGponPhysicalUni", 271),
          ("arap", 88),
          ("arcnet", 35),
          ("arcnetPlus", 36),
          ("async", 84),
          ("atm", 37),
          ("atmDxi", 105),
          ("atmFuni", 106),
          ("atmIma", 107),
          ("atmLogical", 80),
          ("atmRadio", 189),
          ("atmSubInterface", 134),
          ("atmVciEndPt", 194),
          ("atmVirtual", 149),
          ("atmbond", 234),
          ("aviciOpticalEther", 233),
          ("ax25", 298),
          ("basicISDN", 20),
          ("bgppolicyaccounting", 162),
          ("bits", 255),
          ("bridge", 209),
          ("bsc", 83),
          ("cableDownstreamRfPort", 257),
          ("capwapDot11Bss", 253),
          ("capwapDot11Profile", 252),
          ("capwapWtpVirtualRadio", 254),
          ("cblVectaStar", 228),
          ("cctEmul", 61),
          ("ces", 133),
          ("channel", 70),
          ("ciscoISLvlan", 222),
          ("cnr", 85),
          ("coffee", 132),
          ("compositeLink", 155),
          ("cpri", 300),
          ("dcn", 141),
          ("ddnX25", 4),
          ("digitalPowerline", 138),
          ("digitalWrapperOverheadChannel", 186),
          ("dlsw", 74),
          ("docsCableDownstream", 128),
          ("docsCableMCmtsDownstream", 229),
          ("docsCableMaclayer", 127),
          ("docsCableNdf", 287),
          ("docsCableNdr", 288),
          ("docsCableScte55d1FwdOob", 283),
          ("docsCableScte55d1RetOob", 284),
          ("docsCableScte55d2DsOob", 285),
          ("docsCableScte55d2UsOob", 286),
          ("docsCableUpstream", 129),
          ("docsCableUpstreamChannel", 205),
          ("docsCableUpstreamRfPort", 256),
          ("docsOfdmDownstream", 277),
          ("docsOfdmaUpstream", 278),
          ("ds0", 81),
          ("ds0Bundle", 82),
          ("ds1", 18),
          ("ds1FDL", 170),
          ("ds3", 30),
          ("dtm", 140),
          ("dvbAsiIn", 172),
          ("dvbAsiOut", 173),
          ("dvbRccDownstream", 147),
          ("dvbRccMacLayer", 146),
          ("dvbRccUpstream", 148),
          ("dvbRcsMacLayer", 239),
          ("dvbRcsTdma", 241),
          ("dvbTdm", 240),
          ("e1", 19),
          ("econet", 206),
          ("eon", 25),
          ("eplrs", 87),
          ("escon", 73),
          ("ethernet3Mbit", 26),
          ("ethernetCsmacd", 6),
          ("fast", 125),
          ("fastEther", 62),
          ("fastEtherFX", 69),
          ("fastdsl", 282),
          ("fcipLink", 224),
          ("fddi", 15),
          ("fibreChannel", 56),
          ("frDlciEndPt", 193),
          ("frForward", 158),
          ("frameRelay", 32),
          ("frameRelayInterconnect", 58),
          ("frameRelayMPI", 92),
          ("frameRelayService", 44),
          ("frf16MfrBundle", 163),
          ("g703at2mb", 67),
          ("g703at64k", 66),
          ("g9981", 263),
          ("g9982", 264),
          ("g9983", 265),
          ("gfast", 279),
          ("gfp", 221),
          ("ghn", 290),
          ("gigabitEthernet", 117),
          ("gpon", 250),
          ("gr303IDT", 178),
          ("gr303RDT", 177),
          ("gtp", 216),
          ("h323Gatekeeper", 164),
          ("h323Proxy", 165),
          ("hdh1822", 3),
          ("hdlc", 118),
          ("hdsl2", 168),
          ("hiperlan2", 183),
          ("hippi", 47),
          ("hippiInterface", 57),
          ("homepna", 220),
          ("hostPad", 90),
          ("hssi", 46),
          ("hyperchannel", 14),
          ("ibm370parChan", 72),
          ("idsl", 154),
          ("ieee1394", 144),
          ("ieee19061nanocom", 299),
          ("ieee80211", 71),
          ("ieee80212", 55),
          ("ieee802154", 259),
          ("ieee80216WMAN", 237),
          ("ieee8021axDrni", 297),
          ("ieee8023adLag", 161),
          ("if-gsn", 145),
          ("ifPwType", 246),
          ("ifVfiType", 262),
          ("ilan", 247),
          ("imt", 190),
          ("infiniband", 199),
          ("interleave", 124),
          ("ip", 126),
          ("ipForward", 142),
          ("ipOverAtm", 114),
          ("ipOverCdlc", 109),
          ("ipOverClaw", 110),
          ("ipSwitch", 78),
          ("isdn", 63),
          ("isdns", 75),
          ("isdnu", 76),
          ("iso88022llc", 41),
          ("iso88023Csmacd", 7),
          ("iso88024TokenBus", 8),
          ("iso88025CRFPInt", 98),
          ("iso88025Dtr", 86),
          ("iso88025Fiber", 115),
          ("iso88025TokenRing", 9),
          ("iso88026Man", 10),
          ("isup", 179),
          ("l2vlan", 135),
          ("l3ipvlan", 136),
          ("l3ipxvlan", 137),
          ("lapb", 16),
          ("lapd", 77),
          ("lapf", 119),
          ("linegroup", 210),
          ("lmp", 227),
          ("localTalk", 42),
          ("macSecControlledIF", 231),
          ("macSecUncontrolledIF", 232),
          ("mediaMailOverIp", 139),
          ("mfSigLink", 167),
          ("microwaveCarrierTermination", 295),
          ("microwaveRadioLinkTerminal", 296),
          ("miox25", 38),
          ("mocaVersion1", 236),
          ("modem", 48),
          ("mpc", 113),
          ("mpegTransport", 214),
          ("mpls", 166),
          ("mplsTunnel", 150),
          ("msdsl", 143),
          ("mvl", 191),
          ("myrinet", 99),
          ("nfas", 175),
          ("nsip", 27),
          ("omni", 301),
          ("opticalChannel", 195),
          ("opticalChannelGroup", 219),
          ("opticalTransport", 196),
          ("other", 1),
          ("otnOdu", 260),
          ("otnOduc", 293),
          ("otnOtsi", 291),
          ("otnOtsig", 294),
          ("otnOtu", 261),
          ("otnOtuc", 292),
          ("p2pOverLan", 303),
          ("para", 34),
          ("pdnEtherLoop1", 217),
          ("pdnEtherLoop2", 218),
          ("pip", 248),
          ("plc", 174),
          ("pon155", 207),
          ("pon622", 208),
          ("pos", 171),
          ("ppp", 23),
          ("pppMultilinkBundle", 108),
          ("primaryISDN", 21),
          ("propAtm", 197),
          ("propBWAp2Mp", 184),
          ("propCnls", 89),
          ("propDocsWirelessDownstream", 181),
          ("propDocsWirelessMaclayer", 180),
          ("propDocsWirelessUpstream", 182),
          ("propMultiplexor", 54),
          ("propPointToPointSerial", 22),
          ("propVirtual", 53),
          ("propWirelessP2P", 157),
          ("proteon10Mbit", 12),
          ("proteon80Mbit", 13),
          ("ptm", 289),
          ("q2931", 201),
          ("qam", 226),
          ("qllc", 68),
          ("radioMAC", 188),
          ("radsl", 95),
          ("reachDSL", 192),
          ("regular1822", 2),
          ("rfc1483", 159),
          ("rfc877x25", 5),
          ("roe", 302),
          ("rpr", 225),
          ("rs232", 33),
          ("rsrb", 79),
          ("sdci", 280),
          ("sdlc", 17),
          ("sdsl", 96),
          ("shdsl", 169),
          ("sip", 31),
          ("sipSig", 204),
          ("sipTg", 203),
          ("sixToFour", 215),
          ("slip", 28),
          ("smdsDxi", 43),
          ("smdsIcip", 52),
          ("softwareLoopback", 24),
          ("sonet", 39),
          ("sonetOverheadChannel", 185),
          ("sonetPath", 50),
          ("sonetVT", 51),
          ("srp", 151),
          ("ss7SigLink", 156),
          ("stackToStack", 111),
          ("starLan", 11),
          ("tdlc", 116),
          ("teLink", 200),
          ("termPad", 91),
          ("tr008", 176),
          ("transpHdlc", 123),
          ("tunnel", 131),
          ("ultra", 29),
          ("usb", 160),
          ("v11", 64),
          ("v35", 45),
          ("v36", 65),
          ("v37", 120),
          ("vdsl", 97),
          ("vdsl2", 251),
          ("virtualIpAddress", 112),
          ("virtualTg", 202),
          ("vmwareNicTeam", 272),
          ("vmwareVirtualNic", 258),
          ("voiceDID", 213),
          ("voiceEBS", 245),
          ("voiceEM", 100),
          ("voiceEMFGD", 211),
          ("voiceEncap", 103),
          ("voiceFGDEANA", 212),
          ("voiceFGDOS", 235),
          ("voiceFXO", 101),
          ("voiceFXS", 102),
          ("voiceOverAtm", 152),
          ("voiceOverCable", 198),
          ("voiceOverFrameRelay", 153),
          ("voiceOverIp", 104),
          ("wwanPP", 243),
          ("wwanPP2", 244),
          ("x213", 93),
          ("x25huntGroup", 122),
          ("x25mlp", 121),
          ("x25ple", 40),
          ("x86Laps", 242),
          ("xboxWireless", 281))
    )

    if mibBuilder.loadTexts:
        description = """\
This data type is used as the syntax of the ifType
               object in the (updated) definition of MIB-II's
               ifTable.

               The definition of this textual convention with the
               addition of newly assigned values is published
               periodically by the IANA, in either the Assigned
               Numbers RFC, or some derivative of it specific to
               Internet Network Management number assignments.  (The
               latest arrangements can be obtained by contacting the
               IANA.)

               Interface types must not be directly added to the
               IANAifType-MIB MIB module.  They must instead be added
               to the 'Interface Types (ifType)' registry at
               https://www.iana.org/assignments/smi-numbers.

               The relationship between the assignment of ifType
               values and of OIDs to particular media-specific MIBs
               is solely the purview of IANA and is subject to change
               without notice.  Quite often, a media-specific MIB's
               OID-subtree assignment within MIB-II's 'transmission'
               subtree will be the same as its ifType value.
               However, in some circumstances this will not be the
               case, and implementors must not pre-assume any
               specific relationship between ifType values and
               transmission subtree OIDs.
"""


class IANAtunnelType(TextualConvention, Integer32):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19)
        )
    )
    namedValues = NamedValues(
        *(("aplusp", 18),
          ("atmp", 9),
          ("direct", 2),
          ("dsLite", 17),
          ("gre", 3),
          ("ipHttps", 15),
          ("ipsectunnelmode", 19),
          ("isatap", 13),
          ("l2f", 7),
          ("l2tp", 5),
          ("minimal", 4),
          ("msdp", 10),
          ("other", 1),
          ("pptp", 6),
          ("sixOverFour", 12),
          ("sixToFour", 11),
          ("softwireMesh", 16),
          ("teredo", 14),
          ("udp", 8))
    )

    if mibBuilder.loadTexts:
        description = """\
The encapsulation method used by a tunnel. The value
            direct indicates that a packet is encapsulated
            directly within a normal IP header, with no
            intermediate header, and unicast to the remote tunnel
            endpoint (e.g., an RFC 2003 IP-in-IP tunnel, or an RFC
            1933 IPv6-in-IPv4 tunnel). The value minimal indicates
            that a Minimal Forwarding Header (RFC 2004) is
            inserted between the outer header and the payload
            packet. The value UDP indicates that the payload
            packet is encapsulated within a normal UDP packet
            (e.g., RFC 1234).

            The values sixToFour, sixOverFour, and isatap
            indicates that an IPv6 packet is encapsulated directly
            within an IPv4 header, with no intermediate header,
            and unicast to the destination determined by the 6to4,
            6over4, or ISATAP protocol.

            The remaining protocol-specific values indicate that a
            header of the protocol of that name is inserted
            between the outer header and the payload header.

            The IP Tunnel MIB [RFC4087] is designed to manage
            tunnels of any type over IPv4 and IPv6 networks;
            therefore, it already supports IP-in-IP tunnels.
            But in a DS-Lite scenario, the tunnel type is
            point-to-multipoint IP-in-IP tunnels.  The direct(2)
            defined in the IP Tunnel MIB only supports point-to-point
            tunnels.  So, it needs to define a new tunnel type for
            DS-Lite.

            The assignment policy for IANAtunnelType values is
            identical to the policy for assigning IANAifType
            values.
"""


# MIB Managed Objects in the order of their OIDs


# Managed Objects groups


# Notification objects


# Notifications groups


# Agent capabilities


# Module compliance


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "IANAifType-MIB",
    **{"IANAifType": IANAifType,
       "IANAtunnelType": IANAtunnelType,
       "ianaifType": ianaifType}
)
